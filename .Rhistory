#' @import stringr
#' @param x : path of the input file
read.sim <- function(file){
if(!checkExt(file)){
return("Error: The extintion of the do not match the correct form")
}else{
dat=scan(file = file,what = "character",sep = "\n")
LW <- as.numeric(str_split(string = str_split(string = dat[3],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
GF <- as.numeric(str_split(string = str_split(string = dat[4],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
cstNM <- as.numeric(str_split(string = dat[5],pattern = " ")[[1]][1])
valNM <- as.numeric(str_split(string = dat[6],pattern = " ")[[1]][1])
proErr <- as.numeric(str_split(string = dat[7],pattern = " ")[[1]][1])
obsErr <- as.numeric(str_split(string = dat[8],pattern = " ")[[1]][1])
nbrSim <- as.numeric(str_split(string = dat[9],pattern = " ")[[1]][1])
season <- as.numeric(str_split(string = dat[10],pattern = " ")[[1]][1])
nbrFleet <- as.numeric(str_split(string = dat[11],pattern = " ")[[1]][1])
nbrZone <- as.numeric(str_split(string = dat[12],pattern = " ")[[1]][1])
discard <- as.numeric(str_split(string = dat[13],pattern = " ")[[1]][1])
recTot <- as.numeric(str_split(string = dat[14],pattern = " ")[[1]][1])
initLenghts <- as.numeric(str_split(string = str_split(string = dat[15],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
propRec<- as.numeric(str_split(string = str_split(string = dat[16],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
initAbund <- as.numeric(str_split(string = str_split(string = dat[17],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
catchability <- as.numeric(str_split(string = str_split(string = dat[18],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet])
codeData <- str_trim(as.character(str_split(string = dat[19],pattern = "#")[[1]][1]))
fleetName <- as.character(str_trim(str_split(string = str_split(string = dat[20],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet]))
zoneName <- rep("",nbrZone)
dt.array <- array(data = NA,dim = c(season,nbrFleet+2,nbrZone))
index=1
j=0
while(index<nbrZone+1){
j=21+(index-1)*(season+1)
zoneName[index]=str_trim(as.character(str_split(string = dat[j],pattern = " ")[[1]][1]))
for(i in 1:season){
dt.array[i,,index] <-  as.numeric(unlist(str_split(string = str_split(string = dat[j+i],pattern = c(" "))[[1]],pattern = "\t")))
}
index=index+1
}
}
dataList=list("LW"=LW,"GF"=GF,"cstNM"=cstNM,"valNM"=valNM,"proErr"=proErr,"obsErr"=obsErr,"nbrSim"=nbrSim,"season"=season,"nbrFleet"=nbrFleet,"nbrZone"=nbrZone,"discard"=discard,"recTot"=recTot,"initLenghts"=initLenghts,"propRec"=propRec,"initAbund"=initAbund,"catchability"=catchability,"codeData"=codeData,"fleetName"=fleetName,"zoneName"=zoneName,"dt.array"=dt.array)
return(dataList)
}
dd <- read.sim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début8Juin.inp")
#'LW
#'@description Length-Weight relationship
#'@return Weight corresponding to the giving length
LW <- function(length,object){
a <- object@params@value[1]
b <- object@params@value[2]
wi <- round(a*length^b,0)
return(wi)
}
#' growth
#' @description Theorical growth function of octopus after recruitment in weekly steps .
#' @return Weight per week of octopus
growth <- function(object){
a <- object@params@value[3]
b <- object@params@value[4]
Ptheo<-round(exp(a*(7*(0:51) +b)),0)
return(Ptheo)
}
#' age0
#' @description Return the initial age in the begining of fishing season in weeks.
age0 <- function(Ptheo,Pi){
nbrzone <- length(Pi)
t0 <- rep(NA,nbrzone)
for(i in 1:nbrzone){
t0[i]   <- which(abs(Ptheo-Pi[i])==min(abs(Ptheo-Pi[i])))
}
return(t0)
}
#'progressbar
#'@description progress bar from examples of utils package
progressBar <- function(x)
{
pb <- txtProgressBar(min =0,max = 1,initial = 0,char = "=",title = "Simulation",style = 3)
setTxtProgressBar(pb = pb,value = x,title = "Simulation")
}
# test
getExt <- function(file)
tolower(substr(file,max(gregexpr("\\.", file)[[1]])+1,nchar(file)))
checkExt=function(x) (tolower(getExt(x))=="inp")
#' quant2.5
#'
quant2.5 <- function(x){
quantile(x = x,probs = 0.025)
}
#' quant97.5
#'
quant97.5 <- function(x){
quantile(x = x,probs = 0.975)
}
dd <- read.sim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début8Juin.inp")
dd <- read.sim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
dd
#' DEPLSim class and methods
#' @description A class for creating a simulation object under DEPLr
#' @slot controle \code{DPELPar}. Controle parameters of the simualtion.
#' @slot zones \code{DEPLZone}. Zones in the simulation.
#' @slot catch.n \code{array}. An \code{array} that stores the catch in numbers.
#' @slot catch.wt \code{array}. A \code{array} that stores the catch in weight.
#' @slot stock.n \code{array}. A \code{array} that stores the abundance of the stock.
#' @slot stock.wt \code{array}. A \code{array} that stores the biomass of the stock.
#' @slot cpue \code{array}. A \code{array} that stores the cpue data.
#' @section Constructor:
#'  The DEPLSim(object) constructor method allows simple creation of new DEPLSim object.
#' @import stringr
#' @export
DEPLSim <- function(file="missing"){
if(!missing(file)){
tmp <- read.sim(file)
controle=DEPLPar(value=c(tmp$cstNM,tmp$valNM,tmp$proErr,tmp$obsErr,tmp$nbrSim,tmp$season,
tmp$nbrFleet,tmp$nbrZone,tmp$discard,tmp$recTot),
name=c("cstNM","valNM","proErr","obsErr","nbrSim","season","nbrFleet",
"nbrZone","discard","recTot"),
unit="")
fleet=DEPLFleet(n = tmp$nbrFleet,name =tmp$fleetName,catchability=tmp$catchability)
params <- DEPLPar(value = c(tmp$LW,tmp$GF),name=c("L-W","G-F"),unit="")
zones <- DEPLZone(n=tmp$nbrZone,name = tmp$zoneName,fleet = fleet,initAbund = tmp$initAbund,
initLength =tmp$initLenghts,propRec = tmp$propRec,data=tmp$dt.array)
return(new(Class = "DEPLSim",controle=controle,params=params,zones=zones,
catch.n=array(),catch.wt=array(),stock.n=array(),
stock.wt=array(),cpue=array()))
}
}
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
#' DEPLPar constructor.
#' @description Creates an object of the DEPLPar class storing simulation parameters.
#' @slot value \code{numeric} or \code{vector} giving the values of parameters
#' @slot name \code{character} or \code{vector} of characters describing the parameter names
#' @slot unit \code{character} or \code{vector} of characters describing the units of parameters
#' @examples
#' DEPLPar(value=3.0E4,name="Biomass",unit="t")
#' @export
DEPLPar <- function(value,name,unit){
new(Class = "DEPLPar",value=value,name=name,unit=unit)
}
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
#' DEPLPar class and methods
#' @description A class for storing the parameters of a DEPLSim model
#' @return \code{DEPLPar} object
#' @slot value \code{numeric} or \code{vector} giving the values of parameters
#' @slot name \code{character} or \code{vector} of characters describing the parameter names
#' @slot unit \code{character} or \code{vector} of characters describing the units of parameters
#' @section Constructor:
#'  The DEPLPar(object) constructor method allows simple creation of new DEPLPar object.
#' @seealso DEPLZone, DEPLFleet, DEPLSim
#' @examples
#' DEPLPar(value=3.0E4,name="Biomass",unit="t")
setClass(Class = "DEPLPar",representation(value="numeric",
name="character",
unit="character"
))
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
#' DEPLFleet constructor
#' @description Creates an object of the DEPLFleet class representing a fleet exploiting the fishery.
#' @slot n \code{integer}. The number of fleets.
#' @slot name \code{character} or \code{vector} of characters describing the fleets names
#' @slot catchability \code{numeric} or vector giving the catchability of each fleet
#' @examples
#' DEPLFleet(n=1,name="artisanal",catchability=3.2E-5)
#' @export
DEPLFleet <- function(n,name,catchability){
new(Class = "DEPLFleet",n=n,name=name,catchability=catchability)
}
#' DEPLFleet class and methods
#' @description A class for creating an object that describes a fleet
#' @slot n \code{integer}. The number of fleets.
#' @slot name \code{character} or \code{vector} of characters describing the fleets names
#' @slot catchability \code{numeric} or vector giving the catchability of each fleet
#' @section Constructor:
#'  The DEPLFleet(object) constructor method allows simple creation of new DEPLFleet object.
#' @seealso DEPLSim, DEPLPar, DEPLZone.
#' @examples
#' DEPLFleet(n=1,name="artisanal",catchability=3.2E-5)
#' @export
setClass(Class = "DEPLFleet",representation(n="numeric",
name="character",
catchability="numeric"))
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
#' DEPLZone constructor
#' @description Creates an object of the DEPLZone class representing a zone exploited in the fishery.
#' @slot name \code{character}. The name of the zone.
#' @slot fleet \code{DEPLFleet}. An object of class DEPLFleet
#' @slot initAbund \code{numeric}. Abundance in the begining of the fishing season
#' @slot initLength \code{numeric}. Length in the begining of the fishing season
#' @slot propRec \code{numeric}. Proportion of total recruitment recieved by zone.
#' @slot data \code{array}
#' @export
DEPLZone <- function(n,name,fleet,initAbund,initLength,propRec,data){
new(Class = "DEPLZone",n=n,name=name,fleet=fleet,initAbund=initAbund,
initLength=initLength,propRec=propRec,data=data)
}
#' dim
#' @description Return the number of zones in a DEPLZone object.
#' @export
setMethod(f = "dim",signature = "DEPLZone",definition = function(x){
return(x@n)
})
#'fleet
#' @description Return the fleet exploiting the zones.
#' @return DEPLFleet object
#' @export
setMethod(f = "fleet",signature = "DEPLZone",definition = function(object){
return(object@fleet)
})
#'names
#' @description Returns the names of \code{DEPLZone} object
#' @export
setMethod(f = "names",signature = "DEPLZone",definition = function(x){
return(x@name)
})
#'names<-
#'@export
setReplaceMethod(f = "names",signature="DEPLZone",definition=function(x,value){
if(length(value)==x@n){
x@name<-as.character(value)
validObject(x)
return(x)
}else{
stop("slot name in x object don't have the same length as value")
}
})
#' describe
#' @description return a description of a DEPLZone in a data.frame
#' @export
setMethod(f = "describe",signature = "DEPLZone",definition = function(object){
dt <- data.frame("Zone"=object@name,"Initial Abundance"=object@initAbund,"Initial Length"=object@initLength,"Recruitment percentage"=object@propRec*100)
return(dt)
})
#'plot
#'@import ggplot2
#'@export
setMethod(f = "plot",signature = "DEPLZone",definition =function(x,y,...){
percent_str <- paste(round(x@initAbund / sum(x@initAbund ) * 100,1), "%", sep="")
zz <- data.frame(zone=x@name,Abundance=x@initAbund,percent=percent_str)
ggplot(zz, aes(x="", y=Abundance, fill=zone)) + geom_bar(width=1,stat = "identity") +
geom_text(aes(y = Abundance/length(Abundance)+ c(0, cumsum(Abundance)[-length(Abundance)]), label = percent), size=5) +
coord_polar("y")
})
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
setValidity(Class = "DEPLFleet",method = function(object){
if((length(object@name)!=object@n)|(length(object@catchability)!=object@n)){
stop("Error in the slots of the DEPLFleet object")
}else{
if(!is.numeric(object@catchability)){
stop("catchability must be numeric")
}
}
})
#'show
#'@description print a DEPLFleet object
#'@slot object of DEPLFleet class
#'@export
setMethod(f = "show",signature = "DEPLFleet",definition = function(object){
v<- object@catchability
names(v) <- object@name
l <- list("n"=object@n,"catchability"=v)
print(l)
})
#' dim
#' @description Return the number of fleets in a DEPLFleet object.
#' @export
setMethod(f = "dim",signature = "DEPLFleet",definition = function(x){
return(x@n)
})
#'as.data.frame
#' @description Create a \code{data.frame} from the \code{DEPLFleet} object
#' @export
setMethod(f = "as.data.frame",signature = "DEPLFleet",definition = function(x, row.names = NULL, optional = FALSE, ...){
dt <- data.frame("Fleet"=x@name,"Catchability"=x@catchability)
return(dt)
})
#'names
#' @description Returns the names of \code{DEPLFleet} object
setMethod(f = "names",signature = "DEPLFleet",definition = function(x){
return(x@name)
})
#'names<-
setReplaceMethod(f = "names",signature="DEPLFleet",definition=function(x,value){
if(length(value)==x@n){
x@name<-as.character(value)
validObject(x)
return(x)
}else{
stop("slot name in x object don't have the same length as value")
}
})
#'catchability
#' @description Accessor of the catchability of a \code{DEPLFleet} object
#' @export
setMethod(f = "catchability",signature = "DEPLFleet",definition = function(x){
return(x@catchability)
})
#'catchability<-
#'@description Accessor of the catchability of a \code{DEPLFleet} object
#'@export
setReplaceMethod(f = "catchability",signature="DEPLFleet",definition=function(x,value){
if(length(value)==x@n){
if(is.numeric(value)){
x@catchability<-value
validObject(x)
return(x)
}else{
stop("argument must be numeric")
}
}else{
stop("slot name in DEPLFleet object don't have the same length as value")
}
})
#'fleet
#' @description Return the fleet exploiting the zones.
#' @return DEPLFleet object
#' @export
setGeneric(name = "fleet",def = function(object){
standardGeneric(f = "fleet")
})
#' describe
#' @description return a description of a DEPLZone in a data.frame
#' @export
setGeneric(name = "describe",def = function(object){
standardGeneric(f = "describe")
})
#' catch.n
#' @export
setGeneric(name = "catch.n",def = function(object){
standardGeneric(f = "catch.n")
})
#' catch.wt
#' @export
setGeneric(name = "catch.wt",def = function(object){
standardGeneric(f = "catch.wt")
})
#' stock.n
#' @export
setGeneric(name = "stock.n",def = function(object){
standardGeneric(f = "stock.n")
})
#' stock.wt
#' @export
setGeneric(name = "stock.wt",def = function(object){
standardGeneric(f = "stock.wt")
})
#' index
#' @export
setGeneric(name = "index",def = function(object){
standardGeneric(f = "index")
})
#'catchability
#' @description Accessor of the catchability of a \code{DEPLFleet} object
#' @export
setGeneric(name = "catchability",def = function(x){
standardGeneric(f = "catchability")
})
#'catchability<-
#'@description Accessor of the catchability of a \code{DEPLFleet} object
#'@export
setGeneric(name = "catchability<-",def = function(x,value){
standardGeneric(f = "catchability<-")
})
#'zones
#'@description Return a DEPLZone object from a DEPLSim object
#'@export
setGeneric(name = "zones",def = function(object){
standardGeneric(f = "zones")
})
#'controle
#'@description Return the controle parameter of the DEPLSim object
#'@export
#'
setGeneric(name = "controle",def = function(object){
standardGeneric(f = "controle")
})
dd <- DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
tmp <- read.sim(file)
file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp"
tmp <- read.sim(file)
controle=DEPLPar(value=c(tmp$cstNM,tmp$valNM,tmp$proErr,tmp$obsErr,tmp$nbrSim,tmp$season,
tmp$nbrFleet,tmp$nbrZone,tmp$discard,tmp$recTot),
name=c("cstNM","valNM","proErr","obsErr","nbrSim","season","nbrFleet",
"nbrZone","discard","recTot"),
unit="")
controle
fleet=DEPLFleet(n = tmp$nbrFleet,name =tmp$fleetName,catchability=tmp$catchability)
fleet
params <- DEPLPar(value = c(tmp$LW,tmp$GF),name=c("L-W","G-F"),unit="")
params
zones <- DEPLZone(n=tmp$nbrZone,name = tmp$zoneName,fleet = fleet,initAbund = tmp$initAbund,
initLength =tmp$initLenghts,propRec = tmp$propRec,data=tmp$dt.array)
#' DEPLZone class and methods
#' @description A class for creating an object that describes a fishing zone
#' @return \code{DEPLZone} object
#' @slot name \code{character}. The name of the zone.
#' @slot fleet \code{DEPLFleet}. An object of class DEPLFleet
#' @slot initAbund \code{numeric}. Abundance in the begining of the fishing season
#' @slot initLength \code{numeric}. Length in the begining of the fishing season
#' @slot propRec \code{numeric}. Proportion of total recruitment recieved by zone.
#' @slot data \code{array}. Fishing effort, Weekly natural mortality and recruitment distribution.
#' @section Constructor:
#'  The DEPLZone(object) constructor method allows simple creation of new DEPLZone object.
#' @seealso DEPLPar, DEPLFleet, DEPLSim
#' @export
setClass(Class = "DEPLZone",representation(n="numeric",
name="character",
fleet="DEPLFleet",
initAbund="numeric",
initLength="numeric",
propRec="numeric",
data="array"
))
zones <- DEPLZone(n=tmp$nbrZone,name = tmp$zoneName,fleet = fleet,initAbund = tmp$initAbund,
initLength =tmp$initLenghts,propRec = tmp$propRec,data=tmp$dt.array)
zones
return(new(Class = "DEPLSim",controle=controle,params=params,zones=zones,
catch.n=array(),catch.wt=array(),stock.n=array(),
stock.wt=array(),cpue=array()))
DEPLSim(file = file)
#' DEPLSim class and methods
#' @description
#' A class that represents the Simulation Depeltion model for Octopus.
#' Creates an object of the DEPLSim class that implements the Simulation Depletion model.
#' @return \code{DEPLSim} object
#' @slot \code{controle}  \code{DEPLPar}
#' @slot \code{params}  \code{DEPLPar}
#' @slot \code{zones}  \code{DEPLZone}
#' @slot \code{catch.n}  \code{array}
#' @slot \code{catch.wt}  \code{array}
#' @slot \code{stock.n}  \code{array}
#' @slot \code{stock.wt}  \code{array}
#' @slot \code{cpue}  \code{array}
#' @author Abdelouahed BEN MHAMED
#' @seealso DEPLPar, DEPLZone, DEPLFleet
setClass(Class = "DEPLSim",representation(controle="DEPLPar",
params="DEPLPar",
zones="DEPLZone",
catch.n="array",
catch.wt="array",
stock.n="array",
stock.wt="array",
cpue="array"))
DEPLSim(file = file)
library(DEPLr)
library(DEPLr)
DEPLSim(file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp")
file
file = "/home/wahid/INRH/Octopus/Assessment/Assessments_2017/Eté/input_files/Eté_2017_Début15Juin(+1MCOTE).inp"
dat=scan(file = file,what = "character",sep = "\n")
LW <- as.numeric(str_split(string = str_split(string = dat[3],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
GF <- as.numeric(str_split(string = str_split(string = dat[4],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
cstNM <- as.numeric(str_split(string = dat[5],pattern = " ")[[1]][1])
cstNM
valNM <- as.numeric(str_split(string = dat[6],pattern = " ")[[1]][1])
proErr <- as.numeric(str_split(string = dat[7],pattern = " ")[[1]][1])
obsErr <- as.numeric(str_split(string = dat[8],pattern = " ")[[1]][1])
nbrSim <- as.numeric(str_split(string = dat[9],pattern = " ")[[1]][1])
season <- as.numeric(str_split(string = dat[10],pattern = " ")[[1]][1])
nbrFleet <- as.numeric(str_split(string = dat[11],pattern = " ")[[1]][1])
nbrZone <- as.numeric(str_split(string = dat[12],pattern = " ")[[1]][1])
discard <- as.numeric(str_split(string = dat[13],pattern = " ")[[1]][1])
recTot <- as.numeric(str_split(string = dat[14],pattern = " ")[[1]][1])
initLenghts <- as.numeric(str_split(string = str_split(string = dat[15],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
propRec<- as.numeric(str_split(string = str_split(string = dat[16],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
initAbund <- as.numeric(str_split(string = str_split(string = dat[17],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
catchability <- as.numeric(str_split(string = str_split(string = dat[18],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet])
codeData <- str_trim(as.character(str_split(string = dat[19],pattern = "#")[[1]][1]))
fleetName <- as.character(str_trim(str_split(string = str_split(string = dat[20],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet]))
zoneName <- rep("",nbrZone)
dt.array <- array(data = NA,dim = c(season,nbrFleet+2,nbrZone))
index=1
j=0
while(index<nbrZone+1){
j=21+(index-1)*(season+1)
zoneName[index]=str_trim(as.character(str_split(string = dat[j],pattern = " ")[[1]][1]))
for(i in 1:season){
dt.array[i,,index] <-  as.numeric(unlist(str_split(string = str_split(string = dat[j+i],pattern = c(" "))[[1]],pattern = "\t")))
}
index=index+1
}
if(!checkExt(file)){
return("Error: The extintion of the do not match the correct form")
}else{
dat=scan(file = file,what = "character",sep = "\n")
LW <- as.numeric(str_split(string = str_split(string = dat[3],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
GF <- as.numeric(str_split(string = str_split(string = dat[4],pattern = "#")[[1]][1],pattern = ",")[[1]][1:2])
cstNM <- as.numeric(str_split(string = dat[5],pattern = " ")[[1]][1])
valNM <- as.numeric(str_split(string = dat[6],pattern = " ")[[1]][1])
proErr <- as.numeric(str_split(string = dat[7],pattern = " ")[[1]][1])
obsErr <- as.numeric(str_split(string = dat[8],pattern = " ")[[1]][1])
nbrSim <- as.numeric(str_split(string = dat[9],pattern = " ")[[1]][1])
season <- as.numeric(str_split(string = dat[10],pattern = " ")[[1]][1])
nbrFleet <- as.numeric(str_split(string = dat[11],pattern = " ")[[1]][1])
nbrZone <- as.numeric(str_split(string = dat[12],pattern = " ")[[1]][1])
discard <- as.numeric(str_split(string = dat[13],pattern = " ")[[1]][1])
recTot <- as.numeric(str_split(string = dat[14],pattern = " ")[[1]][1])
initLenghts <- as.numeric(str_split(string = str_split(string = dat[15],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
propRec<- as.numeric(str_split(string = str_split(string = dat[16],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
initAbund <- as.numeric(str_split(string = str_split(string = dat[17],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrZone])
catchability <- as.numeric(str_split(string = str_split(string = dat[18],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet])
codeData <- str_trim(as.character(str_split(string = dat[19],pattern = "#")[[1]][1]))
fleetName <- as.character(str_trim(str_split(string = str_split(string = dat[20],pattern = "#")[[1]][1],pattern = ",")[[1]][1:nbrFleet]))
zoneName <- rep("",nbrZone)
dt.array <- array(data = NA,dim = c(season,nbrFleet+2,nbrZone))
index=1
j=0
while(index<nbrZone+1){
j=21+(index-1)*(season+1)
zoneName[index]=str_trim(as.character(str_split(string = dat[j],pattern = " ")[[1]][1]))
for(i in 1:season){
dt.array[i,,index] <-  as.numeric(unlist(str_split(string = str_split(string = dat[j+i],pattern = c(" "))[[1]],pattern = "\t")))
}
index=index+1
}
}
